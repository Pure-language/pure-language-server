{
  "scopeName": "source.qrk",
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Quark",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#sexp"
		},
		{
			"include": "#keyfn"
		},
		{
			"include": "#string"
		},
    {
      "include": "#char"
    },
		{
			"include": "#var"
		}
	],
	"repository": {
		"comment": {
			"begin": ";",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.qrk"
				}
			},
			"end": "$",
			"name": "comment.line.semicolon.qrk"
		},
		"keyword": {
			"match": "(?<=(\\s|\\(|\\[|\\{)):[\\w\\#\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}|\\,))",
			"name": "constant.keyword.qrk"
		},
		"keyfn": {
			"patterns": [
				{
					"match": "(?<=(\\s|\\(|\\[|\\{))(if|do|let|fn|error)(?=(\\s|\\)|\\]|\\}))",
					"name": "storage.control.qrk"
				},
				{
					"match": "(?<=(\\s|\\(|\\[|\\{))(declare|import|instance|class|data|(def[\\p{Ll}\\-]*))(?=(\\s|\\)|\\]|\\}))",
					"name": "keyword.control.qrk"
				}
			]
		},
		"sexp": {
			"begin": "(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.expression.begin.qrk"
				}
			},
			"end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.expression.end.trailing.qrk"
				},
				"2": {
					"name": "punctuation.section.expression.end.trailing.qrk"
				},
				"3": {
					"name": "punctuation.section.expression.end.qrk"
				}
			},
			"name": "meta.expression.qrk",
			"patterns": [
				{
					"begin": "(?<=\\()(ns|declare|def[\\w\\d._:+=><!?*-]*|[\\w._:+=><!?*-][\\w\\d._:+=><!?*-]*/def[\\w\\d._:+=><!?*-]*)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.qrk"
						}
					},
					"end": "(?=\\))",
					"name": "meta.definition.global.qrk",
					"patterns": [
						{
							"match": "([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)",
							"name": "entity.global.qrk"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "#keyfn"
				},
				{
					"include": "#sexp"
				},
        {
          "include": "#constants"
        },
				{
					"match": "(?<=\\()(.+?)(?=\\s|\\))",
					"captures": {
						"1": {
							"name": "entity.name.function.qrk"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "$self"
				}
			]
		},
		"string": {
			"begin": "(?<!\\\\)(\")",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.qrk"
				}
			},
			"end": "(\")",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.qrk"
				}
			},
			"name": "string.quoted.double.qrk",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.qrk"
				}
			]
		},
		"char": {
			"begin": "(?<!\\\\)(')",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.qrk"
				}
			},
			"end": "(')",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.qrk"
				}
			},
			"name": "string.quoted.double.qrk",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.qrk"
				}
			]
		},
    "constants": {
			"patterns": [
				{
					"match": "(nil)(?=(\\s|\\)|\\]|\\}))",
					"name": "constant.language.nil.clojure"
				},
				{
					"match": "(true|false)",
					"name": "constant.language.boolean.clojure"
				},
				{
					"match": "([-+]?\\d+/\\d+)",
					"name": "constant.numeric.ratio.clojure"
				},
				{
					"match": "([-+]?[0-9]+(?:(\\.|(?=[eEM]))[0-9]*([eE][-+]?[0-9]+)?)M?)",
					"name": "constant.numeric.double.clojure"
				},
				{
					"match": "([-+]?\\d+N?)",
					"name": "constant.numeric.long.clojure"
				},
				{
					"include": "#keyword"
				}
			]
		},
		"var": {
			"match": "(?<=(\\s|\\(|\\[|\\{)\\#)'[\\w\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}))",
			"name": "meta.var.qrk"
		}
	}
}