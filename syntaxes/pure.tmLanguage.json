{
  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "comment.block.pure",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.line.double-slash.pure",
          "begin": "//",
          "end": "$"
        }
      ]
    },
    "entity": {
      "patterns": [
        {
          "match": "(?<=fun )([a-zA-Z][a-zA-Z0-9_]+)",
          "name": "entity.name.function.pure"
        },
        {
          "match": "([a-zA-Z][a-zA-Z0-9_]+)(\\<)(T)(\\>)(?=[(])",
          "name": "entity.name.function.pure",
          "captures": {
            "1": {
              "name": "entity.name.function.pure"
            },
            "2": {
              "name": "punctuation.definition.type.pure"
            },
            "3": {
              "name": "entity.name.type.generic.pure"
            },
            "4": {
              "name": "punctuation.definition.type.pure"
            }
          }
        },
        {
          "match": "(impl) ([a-zA-Z_][a-zA-Z0-9:_<>]+) (for) ([a-zA-Z_][a-zA-Z0-9_]+) \\{",
          "captures": {
            "1": {
              "name": "storage.type.pure"
            },
            "2": {
              "name": "entity.name.type.implementation.pure"
            },
            "3": {
              "name": "storage.modifier.pure"
            },
            "4": {
              "name": "entity.name.type.pure"
            }
          }
        },
        {
          "match": "(impl) ([a-zA-Z_][a-zA-Z0-9:]+)(?!for) \\{",
          "captures": {
            "1": {
              "name": "storage.type.pure"
            },
            "2": {
              "name": "entity.name.type.pure"
            }
          }
        },
        {
          "match": "\\b(enum|struct|extension)\\s+([a-zA-Z_][a-zA-Z0-9_]+)",
          "captures": {
            "1": {
              "name": "storage.type.pure"
            },
            "2": {
              "name": "entity.name.type.pure"
            }
          }
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "name": "keyword.operator.member-access.pure",
          "match": "(\\.)(?=parse)"
        },
        {
          "name": "keyword.operator.member-access.pure",
          "match": "\\s(\\.)\\b"
        },
        {
          "name": "keyword.operator.member-access.pure",
          "match": "\\b(\\.)\\b"
        },
        {
          "name": "keyword.operator.member-access.pure",
          "match": "\\B(\\.)\\b"
        },
        {
          "name": "keyword.operator.member-access.pure",
          "match": "(\\.)(?=to_string)"
        },
        {
          "name": "keyword.operator.range.pure",
          "match": "(\\.\\.)"
        },
        {
          "name": "keyword.operator.path.pure",
          "match": "(\\:\\:)"
        },
        {
          "name": "keyword.operator.match.pure",
          "match": "(=)"
        },
        {
          "name": "keyword.operator.sigil.pure",
          "match": "[&*](?=[a-zA-Z0-9_\\(\\[\\|\\\"']+)"
        },
        {
          "name": "keyword.operator.assignment.pure",
          "match": "(\\=)"
        },
        {
          "name": "keyword.operator.assignment.pure",
          "match": "\\b(=)\\b"
        },
        {
          "name": "keyword.operator.arithmetic.pure",
          "match": "(!|\\+|-|/|\\*|%|\\^|\\||<<|>>)"
        },
        {
          "name": "keyword.operator.comparison.pure",
          "match": "(&&|\\|\\||==|!=)"
        },
        {
          "name": "keyword.operator.comparison.pure",
          "match": "\\s(<|>)"
        },
        {
          "name": "keyword.operator.comparison.pure",
          "match": "\\B(<=|>=)\\B"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.modifier.external.pure",
          "match": "\\b(extern)\\b"
        },
        {
          "name": "storage.modifier.mutable.pure",
          "match": "\\b(mut)\\b"
        },
        {
          "name": "storage.modifier.visibility.pure",
          "match": "\\b(pub)\\b"
        },
        {
          "name": "storage.type.function.pure",
          "match": "\\b(fun)\\b"
        },
        {
          "name": "storage.type.pure",
          "match": "\\b(let)\\b"
        },
        {
          "name": "storage.type.pure",
          "match": "\\b(async)\\b"
        },
        {
          "name": "storage.type.pure",
          "match": "(impl)(?=<)"
        },
        {
          "name": "storage.type.pure",
          "match": "\\b(enum|impl|struct|extension)\\b"
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "comment": "Floating point literal (fraction)",
          "name": "constant.numeric.float.pure",
          "match": "\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\b"
        },
        {
          "comment": "Floating point literal (exponent)",
          "name": "constant.numeric.float.pure",
          "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\\b"
        },
        {
          "comment": "Floating point literal (typed)",
          "name": "constant.numeric.float.pure",
          "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?(f32|f64)\\b"
        },
        {
          "comment": "Integer literal (decimal)",
          "name": "constant.numeric.integer.decimal.pure",
          "match": "\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\b"
        },
        {
          "comment": "Integer literal (hexadecimal)",
          "name": "constant.numeric.integer.hexadecimal.pure",
          "match": "\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128|s|size))?\\b"
        },
        {
          "comment": "Integer literal (octal)",
          "name": "constant.numeric.integer.octal.pure",
          "match": "\\b0o[0-7_]+([ui](8|16|32|64|128|s|size))?\\b"
        },
        {
          "comment": "Integer literal (binary)",
          "name": "constant.numeric.integer.binary.pure",
          "match": "\\b0b[01_]+([ui](8|16|32|64|128|s|size))?\\b"
        },
        {
          "name": "constant.language.boolean.pure",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "variable.language.self.pure",
          "match": "\\b(self)\\b"
        },
        {
          "name": "keyword.control.pure",
          "match": "\\b(break|continue|else|if|in|for|match|return|while|await)\\b"
        },
        {
          "name": "keyword.other.pure",
          "match": "\\b(ref|import)\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.type.pure",
          "match": ":\\s+?(?=(bool|char|int|float|str|void))"
        },
        {
            "name": "storage.type.core.rust",
            "match": "\\b(bool|char|int|float|str|void)\\b"
        },
        {
          "name": "punctuation.terminator.pure",
          "match": ";"
        },
        {
          "name": "punctuation.other.comma.pure",
          "match": ","
        },
        {
          "name": "punctuation.other.paren.pure",
          "match": "[)(]"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "name": "constant.character.escape.pure",
          "match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
        },
        {
          "name": "constant.character.pure",
          "match": "b?'([^'\\\\]|\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'"
        },
        {
          "name": "string.quoted.double.pure",
          "begin": "b?\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.pure",
              "match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
            },
            {
              "name": "constant.other.placeholder.pure",
              "match": "(\\{)([a-zA-Z0-9_?:$.*<>]+)?(\\})"
            }
          ]
        },
        {
          "name": "string.quoted.double.raw.pure",
          "begin": "b?r(#*)\"",
          "end": "\"\\1"
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "match": "(let) (mut) ([a-zA-Z_][a-zA-Z0-9_]+)",
          "captures": {
            "1": {
              "name": "storage.type.pure"
            },
            "2": {
              "name": "storage.modifier.mutable.pure"
            },
            "3": {
              "name": "variable.other.mutable.pure"
            }
          }
        },
        {
          "name": "variable.other.pure",
          "match": "(?<!\\:\\s)([a-zA-Z_][a-zA-Z0-9_]*)\\s(?==)"
        },
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]+)(?=[:] )",
          "captures": {
            "1": {
              "name": "variable.other.pure"
            }
          }
        },
        {
          "match": "(let) (mut) ([a-zA-Z_]+)",
          "captures": {
            "1": {
              "name": "storage.type.pure"
            },
            "2": {
              "name": "storage.modifier.mutable.pure"
            },
            "3": {
              "name": "variable.other.mutable.pure"
            }
          }
        },
        {
          "match": "(?<!\\:\\s)([a-zA-Z_]\\s)(?==)",
          "captures": {
            "1": {
              "name": "variable.other.pure"
            }
          }
        },
        {
          "match": "([a-zA-Z_]+)(?=[:] )",
          "captures": {
            "1": {
              "name": "variable.other.pure"
            }
          }
        },
        {
          "match": "(let|pub)\\s([a-zA-Z0-9_]+)(\\:\\s)([a-zA-Z0-9_]+)",
          "captures": {
            "1": {
              "name": "storage.type.pure"
            },
            "2": {
              "name": "variable.other.pure"
            },
            "3": {
              "name": "punctuation.separator.type.pure"
            },
            "4": {
              "name": "entity.name.type.pure"
            }
          }
        },
        {
          "match": "^\\s+(return\\s)?(?!self)([a-zA-Z0-9_]+)\\s+$",
          "captures": {
            "1": {
              "name": "keyword.control.pure"
            },
            "2": {
              "name": "variable.other.return-value.pure"
            }
          }
        },
        {
          "match": "([|])(\\w+)([|])",
          "captures": {
            "1": {
              "name": "keyword.operator.pure"
            },
            "2": {
              "name": "variable.other.map.pure"
            },
            "3": {
              "name": "keyword.operator.pure"
            }
          }
        },
        {
          "match": "(?<=&|\\*)(?!mut|self)([a-zA-Z_]+)",
          "captures": {
            "1": {
              "name": "variable.other.ref.pure"
            }
          }
        }
      ]
    }
  },
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "pure",
  "scopeName": "source.pure",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#entity"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#string"
    },
    {
      "include": "#variable"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#storage"
    }
  ]
}
